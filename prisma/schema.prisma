// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id    String @id @default(uuid())
  email String @unique
  name  String

  matchedJobs JobMatch[]
  search      UserSearch?
  experience  UserExperience[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model UserSearch {
  id     String    @id @default(uuid())
  level  JobLevel?
  region String?

  category          String
  categoryParent    String
  jobCategory       JobCategory @relation(name: "UserSearchJobCategory", fields: [category], references: [name])
  jobParentCategory JobCategory @relation(name: "UserSearchParentCategory", fields: [categoryParent], references: [name])

  userId String @unique
  user   User   @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model UserExperience {
  id String @id @default(uuid())

  jobTitle         String
  company          String?
  location         String?
  responsibilities String
  skillsUsed       String?
  startDate        String?
  endDate          String?
  tenure           Int?
  tenureUnit       TenureUnit?

  userId String
  user   User   @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Connector {
  id        String             @id @default(uuid())
  name      String             @unique
  config    Json
  type      ConnectorType
  frequency ConnectorFrequency

  lastSuccess DateTime?
  lastRun     DateTime?

  status  ConnectorStatus
  healthy Boolean         @default(true)
  error   String?

  Job Job[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Job {
  id           String   @id @default(uuid())
  url          String
  title        String
  source       String
  category     String?
  level        JobLevel @default(UNKNOWN)
  description  String?
  location     String?
  roleType     String?
  compensation String?
  company      String?
  tags         String?
  timestamp    BigInt

  // summary field
  summary JobSummary?

  // connector fields
  connector Connector? @relation(fields: [source], references: [name])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // user fields
  JobMatch JobMatch[]
}

model JobSummary {
  id                     String     @id @default(uuid())
  responsibilities       String?
  experienceRequirements String?
  technicalStack         String?
  interviewProcess       String?
  applicationProcess     String?
  aiProvider             AIProvider

  jobId String @unique
  job   Job    @relation(fields: [jobId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model JobMatch {
  id       String   @id @default(uuid())
  score    Float
  decision Decision @default(UNKNOWN)
  reason   String?

  userId String
  user   User   @relation(fields: [userId], references: [id])

  jobId String
  job   Job    @relation(fields: [jobId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, jobId])
}

model JobCategory {
  id       String        @id @default(uuid())
  name     String        @unique
  parent   JobCategory?  @relation("JobCategoryChildParent", fields: [parentId], references: [id])
  parentId String?
  children JobCategory[] @relation("JobCategoryChildParent")

  createdAt                  DateTime     @default(now())
  updatedAt                  DateTime     @updatedAt
  UserSearchByCategory       UserSearch[] @relation("UserSearchJobCategory")
  UserSearchByParentCategory UserSearch[] @relation("UserSearchParentCategory")
}

enum ConnectorType {
  WEB
  RSS
  API
  CHROME_EXTENSION
}

enum ConnectorFrequency {
  EVERY_6_HOURS
  EVERY_HOUR
  EVERY_DAY
}

enum JobLevel {
  INTERN
  ENTRY
  MID_SENIOR
  STAFF
  DIRECTOR
  EXECUTIVE
  UNKNOWN
}

enum ConnectorStatus {
  ONLINE
  OFFLINE
}

enum Decision {
  UNKNOWN
  CONSIDER
  APPLY
  IGNORE
}

enum AIProvider {
  GROQ
  OPEN_AI
}

enum TenureUnit {
  DAYS
  WEEKS
  MONTHS
  YEARS
}
