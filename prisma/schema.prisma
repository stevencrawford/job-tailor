// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id    String @id @default(uuid())
  email String @unique
  name  String

  matchedJobs    JobMatch[]
  SearchCriteria SearchCriteria?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model SearchCriteria {
  id          String   @id @default(uuid())
  jobCategory String
  jobLevel    JobLevel
  region      String?

  userId String @unique
  user   User   @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Connector {
  id           String          @id @default(uuid())
  name         String          @unique
  host         String
  lastSuccess  DateTime?
  status       ConnectorStatus
  healthStatus Boolean         @default(true)

  pageSelectors PageSelector[]
  Job           Job[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model PageSelector {
  id         String @id @default(uuid())
  urlPattern String
  config     Json

  connectorId String
  connector   Connector @relation(fields: [connectorId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Job {
  id           String   @id @default(uuid())
  url          String
  title        String
  source       String
  category     String?
  level        JobLevel @default(UNKNOWN)
  description  String?
  location     String?
  length       String?
  roleType     String?
  compensation String?
  company      String?
  timestamp    BigInt

  // summary field
  summary JobSummary?

  // connector fields
  connector Connector? @relation(fields: [source], references: [name])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // user fields
  JobMatch JobMatch[]
}

model JobSummary {
  id                     String     @id @default(uuid())
  responsibilities       String
  experienceRequirements String
  technicalStack         String
  interviewProcess       String
  aiProvider             AIProvider

  jobId String @unique
  job   Job    @relation(fields: [jobId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model JobMatch {
  id       String   @id @default(uuid())
  score    Float
  decision Decision @default(UNKNOWN)
  reason   String?

  userId String
  user   User   @relation(fields: [userId], references: [id])

  jobId String
  job   Job    @relation(fields: [jobId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, jobId])
}

enum JobLevel {
  INTERN
  ENTRY
  MID_SENIOR
  STAFF
  DIRECTOR
  EXECUTIVE
  UNKNOWN
}

enum ConnectorStatus {
  ONLINE
  OFFLINE
}

enum Decision {
  UNKNOWN
  CONSIDER
  APPLY
  IGNORE
}

enum AIProvider {
  GROQ
  OPEN_AI
}
